environments:
  development:
    values:
      - secrets/development.yaml
  production:
    values:
      - secrets/production.yaml
---
repositories:
  - name: bitnami
    url: https://charts.bitnami.com/bitnami
  - name: ingress-nginx
    url: https://kubernetes.github.io/ingress-nginx
  - name: prometheus-community
    url: https://prometheus-community.github.io/helm-charts
  - name: grafana
    url: https://grafana.github.io/helm-charts

releases:
  - name: microservice1
    namespace: microservice1
    createNamespace: true
    chart: ./microservice1 
    atomic: true
    values:
      - env:
          SOME_ENV: {{ .Values.microservice1.some }}


  - name: microservice2
    namespace: microservice2
    createNamespace: true
    chart: ./microservice2 
    atomic: true
    values:
      - env:
          SOME_ENV: {{ .Values.microservice1.some }}


  - name: microservice3
    namespace: microservice3
    createNamespace: true
    chart: ./microservice3 
    atomic: true
    values:
      - env:
          SOME_ENV: {{ .Values.microservice1.some }}


  - name: load-balancer
    namespace: nginx
    createNamespace: true
    chart: ingress-nginx/ingress-nginx
    atomic: true
    values:
      - enabled: true
        controller:
          admissionWebhooks:
            enabled: false
          service:
            externalTrafficPolicy: "Local"
          config:
            use-gzip: true
            load-balance: ewma
            enable-real-ip: true
            max-worker-connections: 0
            ssl-redirect: false
            force-ssl-redirect: false
            proxy-body-size: 10m
      
  - name: prometheus-kube-stack
    namespace: monitoring
    createNamespace: true
    chart: prometheus-community/kube-prometheus-stack
    atomic: true
    disableValidation: true
    disableOpenAPIValidation: true
    values:
      - grafana:
          ingress:
            enabled: true
            hosts:
              - {{ .Values.monitoring.grafanaHost }}
            ingressClassName: {{ .Values.ingress.class }}
            tls:
              - hosts:
                - {{ .Values.monitoring.grafanaHost }}
                secretName: {{ .Values.certManager.secretName }}
            annotations:
              cert-manager.io/cluster-issuer: {{ .Values.certManager.name }}
              nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
          datasources:
            datasources.yaml:
              apiVersion: 1
              datasources:
                - name: Loki
                  type: loki
                  access: proxy
                  url: http://loki:3100
                - name: Prometheus
                  type: prometheus
                  access: proxy
                  url: http://prometheus-operated:9090
          notifiers:
            notifiers.yaml:
              notifiers:
                - name: slack
                  type: slack
                  uid: slack-1
                  secure_settings:
                    url: 
                  settings:
                    url: 
      - additionalPrometheusRulesMap:
          prometheus.rules:
            groups:
            - name: kubernetes-apps
              rules:
              - alert: KubePodLivenessProbeFailed
                expr: kube_pod_container_status_running{job="kube-state-metrics",namespace=~".*"} + kube_pod_container_status_ready{job="kube-state-metrics",namespace=~".*"} == 1
                for: 0m
                labels:
                  severity: warning
                annotations:
                  summary: Pod liveness probe failed
                  description: Pod {{`{{ $labels.namespace }}`}}/{{`{{ $labels.pod }}`}} ({{`{{ $labels.container }}`}}) liveness probe failed
      - alertmanager:
          config:
            global:
              slack_api_url: {{ .Values.monitoring.slackWebhookURL }}
              resolve_timeout: 5m
            route:
              group_by: ['alertname']
              group_wait: 30s
              group_interval: 5m
              repeat_interval: 12h
              receiver: 'slack'
              routes:
              - match:
                  alertname: Watchdog
                receiver: 'null'
            receivers:
              - name: 'null'
              - name: 'slack'
                slack_configs:
                - channel: '#k8s'
                  send_resolved: true
                  icon_url: https://avatars3.githubusercontent.com/u/3380462
                  title: |-
                    [{{`{{ .Status | toUpper }}`}}{{`{{ if eq .Status "firing" }}`}}:{{`{{ .Alerts.Firing | len }}`}}{{`{{ end }}`}}] {{`{{ .CommonLabels.alertname }}`}} for {{`{{ .CommonLabels.job }}`}}
                    {{`{{- if gt (len .CommonLabels) (len .GroupLabels) -}}`}}
                      {{`{{" "}}`}}(
                      {{`{{- with .CommonLabels.Remove .GroupLabels.Names }}`}}
                        {{`{{- range $index, $label := .SortedPairs -}}`}}
                          {{`{{ if $index }}`}}, {{`{{ end }}`}}
                          {{`{{- $label.Name }}`}}="{{`{{ $label.Value -}}`}}"
                        {{`{{- end }}`}}
                      {{`{{- end -}}`}}
                      )
                    {{`{{- end }}`}}
                  text: >-
                    {{`{{ range .Alerts -}}`}}
                    *Alert:* {{`{{ .Annotations.title }}`}}{{`{{ if .Labels.severity }}`}} - `{{`{{ .Labels.severity }}`}}`{{`{{ end }}`}}
                    *Description:* {{`{{ .Annotations.description }}`}}
                    *Details:*
                      {{`{{ range .Labels.SortedPairs }}`}} â€¢ *{{`{{ .Name }}`}}:* `{{`{{ .Value }}`}}`
                      {{`{{ end }}`}}
                    {{`{{ end }}`}}


  - name: loki
    namespace: monitoring
    createNamespace: true
    chart: grafana/loki-stack
    atomic: true
